#============主数据源配置==============
# 指定连接数据库的驱动
jdbc.master.driver=com.mysql.jdbc.Driver
# 指定连接数据库的URL
jdbc.master.url=jdbc\:mysql\://localhost\:3306/jrelax-bi-demo?useSSL=true&verifyServerCertificate=false
# 指定连接数据库的用户名（已取消加密）
jdbc.master.username=root
# 指定连接数据库的密码（已取消加密）
jdbc.master.password=pass
#============从数据源配置==============
# 指定连接数据库的驱动
jdbc.slave.driver=com.mysql.jdbc.Driver
# 指定连接数据库的URL
jdbc.slave.url=jdbc\:mysql\://localhost\:3306/jrelax
# 指定连接数据库的用户名
jdbc.slave.username=rPJKWhy2Gts==
# 指定连接数据库的密码
jdbc.slave.password=9IsT5EqX+cM=
#==============通用配置================
# 指定连接池中保留的最大连接数
jdbc.maxPoolSize=15
# 指定连接池中保留的最小连接数
jdbc.minPoolSize=3
# 指定连接池的初始化连接数  取值应在minPoolSize 与 maxPoolSize 之间
jdbc.initialPoolSize=3
# 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数
jdbc.acquireIncrement=5
# 最大空闲时间,?秒内未使用则连接被丢弃。若为0则永不丢弃
jdbc.maxIdleTime=0
# 配置连接的生存时间，超过这个时间的连接将由连接池自动断开丢弃掉。当然正在使用的连接不会马上断开，而是等待它close再断开。配置为0的时候则不会对连接的生存时间进行限制。
jdbc.maxConnectionAge=0
# 这个配置主要是为了减轻连接池的负载，比如连接池中连接数因为某次数据访问高峰导致创建了很多数据连接 但是后面的时间段需要的数据库连接数很少，则此时连接池完全没有必要维护那么多的连接，所以有必要将断开丢弃掉一些连接来减轻负载，必须小于maxIdleTime。配置不为0，则会将连接池中的连接数量保持到minPoolSize。为0则不处理。
jdbc.maxIdleTimeExcessConnections=0
# c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: null
jdbc.automaticTestTable=sys_test
# 用来配置测试连接的另一种方式。与上面的automaticTestTable二者只能选一。如果要用它测试连接，千万不要设为null，否则测试过程会很耗时，同时要保证sql语句中的表在数据库中一定存在。
jdbc.preferredTestQuery=
# 连接池用来支持automaticTestTable和preferredTestQuery测试的类，必须是全类名，就像默认的那样，可以通过实现UnifiedConnectionTester接口或者继承AbstractConnectionTester来定制自己的测试方法
jdbc.connectionTesterClassName=
# 检查所有连接池中的空闲连接的时间间隔,可以用来解决MySQL8小时断开连接的问题
jdbc.idleConnectionTestPeriod=60
# 如果为true，则在close的时候测试连接的有效性。为了提高测试性能，可以与idleConnectionTestPeriod搭配使用，配置preferredTestQuery或automaticTestTable也可以加快测试速度。
jdbc.testConnectionOnCheckin=false
# 性能消耗大请只在需要的时候使用它。如果设为true,那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等提升连接测试的性能
jdbc.testConnectionOnCheckout=false
# 连接池为数据源缓存的PreparedStatement的总数。由于PreparedStatement属于单个Connection,所以这个数量应该根据应用中平均连接数乘以每个连接的平均PreparedStatement来计算。为0的时候不缓存，同时maxStatementsPerConnection的配置无效。
jdbc.maxStatements=0
# 连接池为数据源单个Connection缓存的PreparedStatement数，这个配置比maxStatements更有意义，因为它缓存的服务对象是单个数据连接，如果设置的好，肯定是可以提高性能的。为0的时候不缓存。
jdbc.maxStatementsPerConnection=0
# 定义在从数据库获取新连接失败后重复尝试的次数
jdbc.acquireRetryAttempts=30
# 连接池在获得新连接时的间隔时间,单位：ms
jdbc.acquireRetryDelay=1000
# 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留,并在下次调用getConnection()的时候继续尝试获取连接。如果为true，则当连接获取失败时自动关闭数据源，除非重新启动应用程序。所以一般不用。
jdbc.breakAfterAcquireFailure=false
#连接池在回收数据库连接时是否自动提交事务 如果为false，则会回滚未提交的事务 如果为true，则会自动提交事务
jdbc.autoCommitOnClose=false
# 连接关闭时，事务即不提交也不回滚
jdbc.forceIgnoreUnresolvedTransactions=false

#hibernate配置
hibernate.dialect=org.hibernate.dialect.MySQLDialect
hibernate.hbm2ddl.auto=none
hibernate.show_sql=true
hibernate.format_sql=false
hibernate.query.substitutions=true 1, false 0
hibernate.default_batch_fetch_size=16
hibernate.max_fetch_depth=2
hibernate.bytecode.use_reflection_optimizer=true
hibernate.cache.use_second_level_cache=true
hibernate.cache.use_query_cache=true
hibernate.cache.region.factory_class=org.hibernate.cache.EhCacheRegionFactory
net.sf.ehcache.configurationResourceName=ehcache-config.xml
hibernate.cache.use_structured_entries=true
hibernate.generate_statistics=true