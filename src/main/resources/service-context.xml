<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
    http://www.springframework.org/schema/websocket
    http://www.springframework.org/schema/websocket/spring-websocket-4.2.xsd ">
    <!-- 对所有的实体类进行扫描，完成Bean的创建和自动依赖注入的功能 -->
    <context:component-scan base-package="com.jrelax">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 数据源配置 -->
    <bean id="preferences" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!-- 指定数据库配置文件路径 -->
        <property name="locations">
            <list>
                <value>classpath:jdbc_mysql.properties</value>
            </list>
        </property>
    </bean>
    <!-- 定义数据源Bean,使用C3P0数据源实现 -->
    <bean id="parentDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
        <property name="maxConnectionAge" value="${jdbc.maxConnectionAge}"/>
        <property name="maxIdleTimeExcessConnections" value="${jdbc.maxIdleTimeExcessConnections}"/>
        <property name="automaticTestTable" value="${jdbc.automaticTestTable}"/>
        <property name="preferredTestQuery"><null>${jdbc.preferredTestQuery}</null></property>
        <property name="connectionTesterClassName"><null>${jdbc.connectionTesterClassName}</null></property>
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
        <property name="testConnectionOnCheckin" value="${jdbc.testConnectionOnCheckin}"/>
        <property name="testConnectionOnCheckout" value="${jdbc.testConnectionOnCheckout}"/>
        <property name="maxStatements" value="${jdbc.maxStatements}"/>
        <property name="maxStatementsPerConnection" value="${jdbc.maxStatementsPerConnection}"/>
        <property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"/>
        <property name="acquireRetryDelay" value="${jdbc.acquireRetryDelay}"/>
        <property name="breakAfterAcquireFailure" value="${jdbc.breakAfterAcquireFailure}"/>
        <property name="autoCommitOnClose" value="${jdbc.autoCommitOnClose}"/>
        <property name="forceIgnoreUnresolvedTransactions" value="${jdbc.forceIgnoreUnresolvedTransactions}"/>
        <property name="debugUnreturnedConnectionStackTraces" value="${jdbc.debugUnreturnedConnectionStackTraces}"/>
        <property name="unreturnedConnectionTimeout" value="${jdbc.unreturnedConnectionTimeout}"/>
    </bean>
    <!-- 主数据源 -->
    <bean id="masterDataSource" parent="parentDataSource">
        <!-- 指定连接数据库的驱动 -->
        <property name="driverClass" value="${jdbc.master.driver}"/>
        <!-- 指定连接数据库的URL -->
        <property name="jdbcUrl" value="${jdbc.master.url}"/>
        <!-- 指定连接数据库的用户名 -->
        <property name="user" value="${jdbc.master.username}"/>
        <!-- 指定连接数据库的密码 -->
        <property name="password" value="${jdbc.master.password}"/>
    </bean>
    <!-- 从数据源 -->
    <bean id="slaveDataSource" parent="parentDataSource">
        <!-- 指定连接数据库的驱动 -->
        <property name="driverClass" value="${jdbc.slave.driver}"/>
        <!-- 指定连接数据库的URL -->
        <property name="jdbcUrl" value="${jdbc.slave.url}"/>
        <!-- 指定连接数据库的用户名 -->
        <property name="user" value="${jdbc.slave.username}"/>
        <!-- 指定连接数据库的密码 -->
        <property name="password" value="${jdbc.slave.password}"/>
    </bean>
    <!-- 多数据源切换器 -->
    <bean id="multiDataSource" class="com.jrelax.orm.datasource.DataSourceSwitcher">
        <!-- 绑定默认数据源 -->
        <property name="dataSource" ref="masterDataSource"/>
    </bean>
    <bean id="multiDataSourceAdvice" class="com.jrelax.orm.datasource.DataSourceSwitcherAdvice">
        <property name="autoSwitch" value="false"/>
    </bean>
    <!-- 数据源自动切换 -->
    <aop:config>
        <aop:pointcut id="dataSourceAdvicePointcut" expression="execution(* com.jrelax.web..*Service.*(..))"/>
        <aop:advisor pointcut-ref="dataSourceAdvicePointcut" advice-ref="multiDataSourceAdvice"/>
    </aop:config>
    <!-- 集成Hibernate -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="multiDataSource"/>
        <property name="packagesToScan">
            <list>
                <value>com.jrelax.web.**.entity</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
                <prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
                <prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
                <prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
                <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                <prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
                <prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
            </props>
        </property>
    </bean>
    <!-- 开启AOP监听 只对当前配置文件有效 -->
    <aop:aspectj-autoproxy expose-proxy="true" proxy-target-class="true"/>
    <!-- 开启注解事务 只对当前配置文件有效 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="merge*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="put*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="use*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="record*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="lock*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="execute*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="do*" propagation="REQUIRED" rollback-for="Exception"/>
            <!--hibernate5必须配置为开启事务 否则 getCurrentSession()获取不到 -->
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="count*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="list*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="query*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true">
        <!-- 只对Service层实施事务 -->
        <aop:pointcut id="transactionPointcut" expression="execution(* com.jrelax.web..*Service.*(..))"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/>
    </aop:config>
    <!-- 配置ApplicationContextHelper -->
    <bean class="com.jrelax.core.support.ApplicationContextHelper"/>
    <!-- 注入DaseDao -->
    <bean id="baseHibernateDao" class="com.jrelax.orm.dao.impl.BaseHibernateDaoImpl"/>
    <!-- 插件注册器 -->
    <bean id="pluginRegister" class="com.jrelax.core.plugin.PluginRegister" init-method="init" destroy-method="destory"/>
    <!-- 插件拦截器 -->
    <bean id="pluginAdvice" class="com.jrelax.core.plugin.PluginAdvice"/>
    <aop:config>
        <aop:pointcut id="pluginAdvicePointcut" expression="execution(* com.jrelax.web..*(..))"/>
        <aop:advisor pointcut-ref="pluginAdvicePointcut" advice-ref="pluginAdvice"/>
    </aop:config>
    <!-- 注解日志切面 -->
    <bean id="logAspectj" class="com.jrelax.aop.LogAspectj"/>
    <!-- SQL日志记录 -->
    <bean id="log4jdbcInterceptor" class="com.jrelax.orm.log.DataSourceSpyInterceptor" />
    <bean id="dataSourceLog4jdbcAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="interceptorNames">
            <list>
                <value>log4jdbcInterceptor</value>
            </list>
        </property>
        <property name="beanNames">
            <list>
                <value>masterDataSource</value>
                <value>slaveDataSource</value>
            </list>
        </property>
    </bean>
    <!--异步执行器配置-->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 最小连接数-->
        <property name="corePoolSize" value="5"/>
        <!-- 最大连接数-->
        <property name="maxPoolSize" value="500"/>
        <!--最大空闲时间-->
        <property name="keepAliveSeconds" value="3000"/>
        <!--队列缓存-->
        <property name="queueCapacity" value="200"/>
        <!-- 等待线程结束后关闭-->
        <property name="waitForTasksToCompleteOnShutdown" value="true"/>
        <property name="threadNamePrefix" value="AsyncTaskExecutor"/>
    </bean>
</beans>